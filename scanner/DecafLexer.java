// Generated from DecafLexer.g by ANTLR 4.3

  package compiler.scanner;
  import java.util.LinkedList;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ADD=1, SUB=2, MULT=3, DIV=4, PORC=5, LESSTHAT=6, GREATTHAT=7, LESSEQ=8, 
		GREATEQ=9, AND=10, OR=11, NOT=12, XOR=13, EQUAL=14, NOTEQUAL=15, ASSIGN=16, 
		PLUSASSIGN=17, MINUSASSIGN=18, COMA=19, SEMICOLON=20, OPENAREN=21, CLOSEPAREN=22, 
		OPENBRACKET=23, CLOSEBRACKET=24, OPENBRACE=25, CLOSEBRACE=26, STRINGLITERAL=27, 
		CHARLIT=28, BOOLEANLITERAL=29, HEXLIT=30, INTLITERAL=31, DECIMALIT=32, 
		VAR=33, CLASS=34, INT=35, BOOLEAN=36, VOID=37, IF=38, FOR=39, RETURN=40, 
		BREAK=41, CONTINUE=42, CALLOUT=43, ELSE=44, ESPACIOS=45, COMENT=46;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'"
	};
	public static final String[] ruleNames = {
		"DIGIT", "HEX", "LETTER", "SIGNO", "ESC", "ADD", "SUB", "MULT", "DIV", 
		"PORC", "LESSTHAT", "GREATTHAT", "LESSEQ", "GREATEQ", "AND", "OR", "NOT", 
		"XOR", "EQUAL", "NOTEQUAL", "ASSIGN", "PLUSASSIGN", "MINUSASSIGN", "COMA", 
		"SEMICOLON", "OPENAREN", "CLOSEPAREN", "OPENBRACKET", "CLOSEBRACKET", 
		"OPENBRACE", "CLOSEBRACE", "STRINGLITERAL", "CHARLIT", "BOOLEANLITERAL", 
		"HEXLIT", "INTLITERAL", "DECIMALIT", "VAR", "CLASS", "INT", "BOOLEAN", 
		"VOID", "IF", "FOR", "RETURN", "BREAK", "CONTINUE", "CALLOUT", "ELSE", 
		"ESPACIOS", "COMENT"
	};


		
		public LinkedList error = new LinkedList();
		
		public void emitErrorMessage(String msg)
		{
			error.add(msg);
		}


	public DecafLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafLexer.g"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 49: ESPACIOS_action((RuleContext)_localctx, actionIndex); break;

		case 50: COMENT_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void ESPACIOS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  skip();  break;
		}
	}
	private void COMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: skip(); break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\60\u018f\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\3\2\3\2\3\3\5\3m\n\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\b\3\b"+
		"\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3"+
		"\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3"+
		"\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\32\3"+
		"\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3!\7"+
		"!\u00b5\n!\f!\16!\u00b8\13!\3!\3!\3\"\3\"\3\"\5\"\u00bf\n\"\3\"\3\"\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u00cc\n#\3$\3$\3$\3$\5$\u00d2\n$\3$\3$\7"+
		"$\u00d6\n$\f$\16$\u00d9\13$\3%\6%\u00dc\n%\r%\16%\u00dd\3%\3%\3%\6%\u00e3"+
		"\n%\r%\16%\u00e4\5%\u00e7\n%\3&\3&\7&\u00eb\n&\f&\16&\u00ee\13&\3\'\3"+
		"\'\5\'\u00f2\n\'\3\'\3\'\3\'\7\'\u00f7\n\'\f\'\16\'\u00fa\13\'\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\5(\u0106\n(\3)\3)\3)\3)\3)\3)\5)\u010e\n)\3*\3"+
		"*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u011e\n*\3+\3+\3+\3+\3+\3+\3"+
		"+\3+\5+\u0128\n+\3,\3,\3,\3,\5,\u012e\n,\3-\3-\3-\3-\3-\3-\5-\u0136\n"+
		"-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0144\n.\3/\3/\3/\3/\3/\3/\3"+
		"/\3/\3/\3/\5/\u0150\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0162\n\60\3\61\3\61\3\61\3\61"+
		"\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0172\n\61\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u017c\n\62\3\63\6\63\u017f\n"+
		"\63\r\63\16\63\u0180\3\63\3\63\3\64\3\64\3\64\3\64\7\64\u0189\n\64\f\64"+
		"\16\64\u018c\13\64\3\64\3\64\2\2\65\3\2\5\2\7\2\t\2\13\2\r\3\17\4\21\5"+
		"\23\6\25\7\27\b\31\t\33\n\35\13\37\f!\r#\16%\17\'\20)\21+\22-\23/\24\61"+
		"\25\63\26\65\27\67\309\31;\32=\33?\34A\35C\36E\37G I!K\"M#O$Q%S&U\'W("+
		"Y)[*]+_,a-c.e/g\60\3\2\13\4\2CHch\4\2C\\c|\4\2--//\n\2$$))^^ddhhppttv"+
		"v\5\2$$))^^\6\2\13\f$$))^^\4\2ZZzz\5\2\13\f\17\17\"\"\4\2\f\f\17\17\u01a5"+
		"\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27"+
		"\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2"+
		"\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2"+
		"\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2"+
		"\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2"+
		"\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S"+
		"\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2"+
		"\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\3i\3\2\2\2\5l\3\2\2\2"+
		"\7n\3\2\2\2\tp\3\2\2\2\13r\3\2\2\2\ru\3\2\2\2\17w\3\2\2\2\21y\3\2\2\2"+
		"\23{\3\2\2\2\25}\3\2\2\2\27\177\3\2\2\2\31\u0081\3\2\2\2\33\u0083\3\2"+
		"\2\2\35\u0086\3\2\2\2\37\u0089\3\2\2\2!\u008c\3\2\2\2#\u008f\3\2\2\2%"+
		"\u0091\3\2\2\2\'\u0093\3\2\2\2)\u0096\3\2\2\2+\u0099\3\2\2\2-\u009b\3"+
		"\2\2\2/\u009e\3\2\2\2\61\u00a1\3\2\2\2\63\u00a3\3\2\2\2\65\u00a5\3\2\2"+
		"\2\67\u00a7\3\2\2\29\u00a9\3\2\2\2;\u00ab\3\2\2\2=\u00ad\3\2\2\2?\u00af"+
		"\3\2\2\2A\u00b1\3\2\2\2C\u00bb\3\2\2\2E\u00cb\3\2\2\2G\u00cd\3\2\2\2I"+
		"\u00e6\3\2\2\2K\u00e8\3\2\2\2M\u00f1\3\2\2\2O\u0105\3\2\2\2Q\u010d\3\2"+
		"\2\2S\u011d\3\2\2\2U\u0127\3\2\2\2W\u012d\3\2\2\2Y\u0135\3\2\2\2[\u0143"+
		"\3\2\2\2]\u014f\3\2\2\2_\u0161\3\2\2\2a\u0171\3\2\2\2c\u017b\3\2\2\2e"+
		"\u017e\3\2\2\2g\u0184\3\2\2\2ij\4\62;\2j\4\3\2\2\2km\t\2\2\2lk\3\2\2\2"+
		"m\6\3\2\2\2no\t\3\2\2o\b\3\2\2\2pq\t\4\2\2q\n\3\2\2\2rs\7^\2\2st\t\5\2"+
		"\2t\f\3\2\2\2uv\7-\2\2v\16\3\2\2\2wx\7/\2\2x\20\3\2\2\2yz\7,\2\2z\22\3"+
		"\2\2\2{|\7\61\2\2|\24\3\2\2\2}~\7\'\2\2~\26\3\2\2\2\177\u0080\7>\2\2\u0080"+
		"\30\3\2\2\2\u0081\u0082\7@\2\2\u0082\32\3\2\2\2\u0083\u0084\7>\2\2\u0084"+
		"\u0085\7?\2\2\u0085\34\3\2\2\2\u0086\u0087\7@\2\2\u0087\u0088\7?\2\2\u0088"+
		"\36\3\2\2\2\u0089\u008a\7(\2\2\u008a\u008b\7(\2\2\u008b \3\2\2\2\u008c"+
		"\u008d\7~\2\2\u008d\u008e\7~\2\2\u008e\"\3\2\2\2\u008f\u0090\7#\2\2\u0090"+
		"$\3\2\2\2\u0091\u0092\7`\2\2\u0092&\3\2\2\2\u0093\u0094\7?\2\2\u0094\u0095"+
		"\7?\2\2\u0095(\3\2\2\2\u0096\u0097\7#\2\2\u0097\u0098\7?\2\2\u0098*\3"+
		"\2\2\2\u0099\u009a\7?\2\2\u009a,\3\2\2\2\u009b\u009c\7-\2\2\u009c\u009d"+
		"\7?\2\2\u009d.\3\2\2\2\u009e\u009f\7/\2\2\u009f\u00a0\7?\2\2\u00a0\60"+
		"\3\2\2\2\u00a1\u00a2\7.\2\2\u00a2\62\3\2\2\2\u00a3\u00a4\7=\2\2\u00a4"+
		"\64\3\2\2\2\u00a5\u00a6\7*\2\2\u00a6\66\3\2\2\2\u00a7\u00a8\7+\2\2\u00a8"+
		"8\3\2\2\2\u00a9\u00aa\7]\2\2\u00aa:\3\2\2\2\u00ab\u00ac\7_\2\2\u00ac<"+
		"\3\2\2\2\u00ad\u00ae\7}\2\2\u00ae>\3\2\2\2\u00af\u00b0\7\177\2\2\u00b0"+
		"@\3\2\2\2\u00b1\u00b6\7$\2\2\u00b2\u00b5\5\13\6\2\u00b3\u00b5\n\6\2\2"+
		"\u00b4\u00b2\3\2\2\2\u00b4\u00b3\3\2\2\2\u00b5\u00b8\3\2\2\2\u00b6\u00b4"+
		"\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b9\3\2\2\2\u00b8\u00b6\3\2\2\2\u00b9"+
		"\u00ba\7$\2\2\u00baB\3\2\2\2\u00bb\u00be\7)\2\2\u00bc\u00bf\5\13\6\2\u00bd"+
		"\u00bf\n\7\2\2\u00be\u00bc\3\2\2\2\u00be\u00bd\3\2\2\2\u00bf\u00c0\3\2"+
		"\2\2\u00c0\u00c1\7)\2\2\u00c1D\3\2\2\2\u00c2\u00c3\7v\2\2\u00c3\u00c4"+
		"\7t\2\2\u00c4\u00c5\7w\2\2\u00c5\u00cc\7g\2\2\u00c6\u00c7\7h\2\2\u00c7"+
		"\u00c8\7c\2\2\u00c8\u00c9\7n\2\2\u00c9\u00ca\7u\2\2\u00ca\u00cc\7g\2\2"+
		"\u00cb\u00c2\3\2\2\2\u00cb\u00c6\3\2\2\2\u00ccF\3\2\2\2\u00cd\u00ce\7"+
		"\62\2\2\u00ce\u00d1\t\b\2\2\u00cf\u00d2\5\3\2\2\u00d0\u00d2\5\5\3\2\u00d1"+
		"\u00cf\3\2\2\2\u00d1\u00d0\3\2\2\2\u00d2\u00d7\3\2\2\2\u00d3\u00d6\5\3"+
		"\2\2\u00d4\u00d6\5\5\3\2\u00d5\u00d3\3\2\2\2\u00d5\u00d4\3\2\2\2\u00d6"+
		"\u00d9\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8H\3\2\2\2"+
		"\u00d9\u00d7\3\2\2\2\u00da\u00dc\5\3\2\2\u00db\u00da\3\2\2\2\u00dc\u00dd"+
		"\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e7\3\2\2\2\u00df"+
		"\u00e0\7\62\2\2\u00e0\u00e2\t\b\2\2\u00e1\u00e3\5\5\3\2\u00e2\u00e1\3"+
		"\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5"+
		"\u00e7\3\2\2\2\u00e6\u00db\3\2\2\2\u00e6\u00df\3\2\2\2\u00e7J\3\2\2\2"+
		"\u00e8\u00ec\5\3\2\2\u00e9\u00eb\5\3\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee"+
		"\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00edL\3\2\2\2\u00ee"+
		"\u00ec\3\2\2\2\u00ef\u00f2\5\7\4\2\u00f0\u00f2\7a\2\2\u00f1\u00ef\3\2"+
		"\2\2\u00f1\u00f0\3\2\2\2\u00f2\u00f8\3\2\2\2\u00f3\u00f7\5\7\4\2\u00f4"+
		"\u00f7\7a\2\2\u00f5\u00f7\5\3\2\2\u00f6\u00f3\3\2\2\2\u00f6\u00f4\3\2"+
		"\2\2\u00f6\u00f5\3\2\2\2\u00f7\u00fa\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8"+
		"\u00f9\3\2\2\2\u00f9N\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fb\u00fc\7e\2\2\u00fc"+
		"\u00fd\7n\2\2\u00fd\u00fe\7c\2\2\u00fe\u00ff\7u\2\2\u00ff\u0106\7u\2\2"+
		"\u0100\u0101\7E\2\2\u0101\u0102\7N\2\2\u0102\u0103\7C\2\2\u0103\u0104"+
		"\7U\2\2\u0104\u0106\7U\2\2\u0105\u00fb\3\2\2\2\u0105\u0100\3\2\2\2\u0106"+
		"P\3\2\2\2\u0107\u0108\7K\2\2\u0108\u0109\7P\2\2\u0109\u010e\7V\2\2\u010a"+
		"\u010b\7k\2\2\u010b\u010c\7p\2\2\u010c\u010e\7v\2\2\u010d\u0107\3\2\2"+
		"\2\u010d\u010a\3\2\2\2\u010eR\3\2\2\2\u010f\u0110\7d\2\2\u0110\u0111\7"+
		"q\2\2\u0111\u0112\7q\2\2\u0112\u0113\7n\2\2\u0113\u0114\7g\2\2\u0114\u0115"+
		"\7c\2\2\u0115\u011e\7p\2\2\u0116\u0117\7D\2\2\u0117\u0118\7Q\2\2\u0118"+
		"\u0119\7Q\2\2\u0119\u011a\7N\2\2\u011a\u011b\7G\2\2\u011b\u011c\7C\2\2"+
		"\u011c\u011e\7P\2\2\u011d\u010f\3\2\2\2\u011d\u0116\3\2\2\2\u011eT\3\2"+
		"\2\2\u011f\u0120\7X\2\2\u0120\u0121\7Q\2\2\u0121\u0122\7K\2\2\u0122\u0128"+
		"\7F\2\2\u0123\u0124\7x\2\2\u0124\u0125\7q\2\2\u0125\u0126\7k\2\2\u0126"+
		"\u0128\7f\2\2\u0127\u011f\3\2\2\2\u0127\u0123\3\2\2\2\u0128V\3\2\2\2\u0129"+
		"\u012a\7k\2\2\u012a\u012e\7h\2\2\u012b\u012c\7K\2\2\u012c\u012e\7H\2\2"+
		"\u012d\u0129\3\2\2\2\u012d\u012b\3\2\2\2\u012eX\3\2\2\2\u012f\u0130\7"+
		"h\2\2\u0130\u0131\7q\2\2\u0131\u0136\7t\2\2\u0132\u0133\7H\2\2\u0133\u0134"+
		"\7Q\2\2\u0134\u0136\7T\2\2\u0135\u012f\3\2\2\2\u0135\u0132\3\2\2\2\u0136"+
		"Z\3\2\2\2\u0137\u0138\7t\2\2\u0138\u0139\7g\2\2\u0139\u013a\7v\2\2\u013a"+
		"\u013b\7w\2\2\u013b\u013c\7t\2\2\u013c\u0144\7p\2\2\u013d\u013e\7T\2\2"+
		"\u013e\u013f\7G\2\2\u013f\u0140\7V\2\2\u0140\u0141\7W\2\2\u0141\u0142"+
		"\7T\2\2\u0142\u0144\7P\2\2\u0143\u0137\3\2\2\2\u0143\u013d\3\2\2\2\u0144"+
		"\\\3\2\2\2\u0145\u0146\7D\2\2\u0146\u0147\7T\2\2\u0147\u0148\7G\2\2\u0148"+
		"\u0149\7C\2\2\u0149\u0150\7M\2\2\u014a\u014b\7d\2\2\u014b\u014c\7t\2\2"+
		"\u014c\u014d\7g\2\2\u014d\u014e\7c\2\2\u014e\u0150\7m\2\2\u014f\u0145"+
		"\3\2\2\2\u014f\u014a\3\2\2\2\u0150^\3\2\2\2\u0151\u0152\7e\2\2\u0152\u0153"+
		"\7q\2\2\u0153\u0154\7p\2\2\u0154\u0155\7v\2\2\u0155\u0156\7k\2\2\u0156"+
		"\u0157\7p\2\2\u0157\u0158\7w\2\2\u0158\u0162\7g\2\2\u0159\u015a\7E\2\2"+
		"\u015a\u015b\7Q\2\2\u015b\u015c\7P\2\2\u015c\u015d\7V\2\2\u015d\u015e"+
		"\7K\2\2\u015e\u015f\7P\2\2\u015f\u0160\7W\2\2\u0160\u0162\7G\2\2\u0161"+
		"\u0151\3\2\2\2\u0161\u0159\3\2\2\2\u0162`\3\2\2\2\u0163\u0164\7E\2\2\u0164"+
		"\u0165\7C\2\2\u0165\u0166\7N\2\2\u0166\u0167\7N\2\2\u0167\u0168\7Q\2\2"+
		"\u0168\u0169\7W\2\2\u0169\u0172\7V\2\2\u016a\u016b\7e\2\2\u016b\u016c"+
		"\7c\2\2\u016c\u016d\7n\2\2\u016d\u016e\7n\2\2\u016e\u016f\7q\2\2\u016f"+
		"\u0170\7w\2\2\u0170\u0172\7v\2\2\u0171\u0163\3\2\2\2\u0171\u016a\3\2\2"+
		"\2\u0172b\3\2\2\2\u0173\u0174\7g\2\2\u0174\u0175\7n\2\2\u0175\u0176\7"+
		"u\2\2\u0176\u017c\7g\2\2\u0177\u0178\7G\2\2\u0178\u0179\7N\2\2\u0179\u017a"+
		"\7U\2\2\u017a\u017c\7G\2\2\u017b\u0173\3\2\2\2\u017b\u0177\3\2\2\2\u017c"+
		"d\3\2\2\2\u017d\u017f\t\t\2\2\u017e\u017d\3\2\2\2\u017f\u0180\3\2\2\2"+
		"\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183"+
		"\b\63\2\2\u0183f\3\2\2\2\u0184\u0185\7\61\2\2\u0185\u0186\7\61\2\2\u0186"+
		"\u018a\3\2\2\2\u0187\u0189\n\n\2\2\u0188\u0187\3\2\2\2\u0189\u018c\3\2"+
		"\2\2\u018a\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018d\3\2\2\2\u018c"+
		"\u018a\3\2\2\2\u018d\u018e\b\64\3\2\u018eh\3\2\2\2\37\2l\u00b4\u00b6\u00be"+
		"\u00cb\u00d1\u00d5\u00d7\u00dd\u00e4\u00e6\u00ec\u00f1\u00f6\u00f8\u0105"+
		"\u010d\u011d\u0127\u012d\u0135\u0143\u014f\u0161\u0171\u017b\u0180\u018a"+
		"\4\3\63\2\3\64\3";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}